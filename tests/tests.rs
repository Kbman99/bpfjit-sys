// tests/tests.rs

#[cfg(test)]
mod tests {
    use std::error::Error;
    use bpfjit_sys::*;

    static UDP_123_PACKET: &'static [u8] = &[
        0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0x08, 0x00, 0x45, 0x00,
        0x00, 0x4c, 0x00, 0x00, 0x40, 0x00, 0x35, 0x11, 0x03, 0x44, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc,
        0xde, 0xf0, 0xc9, 0x21, 0x00, 0x7b, 0x00, 0x38, 0xa2, 0xa2, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xdd, 0x32, 0x01, 0xe6, 0x58, 0xd4, 0xfd, 0xf3
    ];

    static TCP_NULL_PACKET: &'static [u8] = &[
        0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0x08, 0x00, 0x45, 0x28,
        0x00, 0x28, 0xf9, 0x41, 0x00, 0x00, 0xf4, 0x06, 0x74, 0x02, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc,
        0xde, 0xf0, 0xb5, 0x58, 0x02, 0x97, 0xcb, 0x86, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x52, 0xca,
        0xff, 0xff, 0x64, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    #[test]
    fn test() -> Result<(), Box<Error>> {
        let filter = BpfJit::new("udp dst port 123")?;
        assert_eq!(filter.matches(UDP_123_PACKET), true);
        assert_eq!(filter.matches(TCP_NULL_PACKET), false);
        let filter = BpfJit::new("tcp src port 46424")?;
        assert_eq!(filter.matches(TCP_NULL_PACKET), true);
        assert_eq!(filter.matches(UDP_123_PACKET), false);
        Ok(())
    }
}
